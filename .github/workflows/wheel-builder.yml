name: Wheel Builder
on:
  workflow_dispatch:
    inputs:
      version:
        description: The version to build
        required: true
  push:
    branches:
      - main
    tags:
      - '*.*'
      - '*.*.*'

env:
  PIP_INDEX_URL: "https://:2021-09-30T01:26:46.989853Z@time-machines-pypi.sealsecurity.io/"

jobs:
  manylinux:
    runs-on: ubuntu-latest
    container: quay.io/pypa/${{ matrix.MANYLINUX.CONTAINER }}
    strategy:
      fail-fast: false
      matrix:
        PYTHON:
          - { VERSION: "cp36-cp36m", PATH: "/opt/python/cp36-cp36m/bin/python", ABI_VERSION: 'cp36' }
          - { VERSION: "pypy3.6", PATH: "/opt/pypy3.6/bin/pypy" }
          - { VERSION: "pypy3.7", PATH: "/opt/pypy3.7/bin/pypy" }
        MANYLINUX:
          - { NAME: "manylinux2010_x86_64", CONTAINER: "manylinux2010_x86_64" }
          - { NAME: "manylinux2014_x86_64", CONTAINER: "manylinux2014_x86_64" }
          - { name: "manylinux_2_24_x86_64", CONTAINER: "manylinux_2_24_x86_64"}
          - { name: "musllinux_1_1_x86_64", CONTAINER: "musllinux_1_1_x86_64"}
        exclude:
          # There are no readily available musllinux PyPy distributions
          - PYTHON: { VERSION: "pypy3.6", PATH: "/opt/pypy3.6/bin/pypy" }
            MANYLINUX: { name: "musllinux_1_1_x86_64", CONTAINER: "cryptography-musllinux_1_1:x86_64" }
          - PYTHON: { VERSION: "pypy3.7", PATH: "/opt/pypy3.7/bin/pypy" }
            MANYLINUX: { name: "musllinux_1_1_x86_64", CONTAINER: "cryptography-musllinux_1_1:x86_64"}
    name: "${{ matrix.PYTHON.VERSION }} for ${{ matrix.MANYLINUX.NAME }}"
    steps:
      - name: install dependencies
        run: |
          install() {
            local package="$1"
            apt update || dnf update || yum update || microdnf update || apk update || true
            apt install -y "$package" || dnf install -y "$package" || yum install -y "$package" || microdnf install -y "$package" || apk add "$package" || true
          }
          install openssl-devel
          install openssl-dev
      - uses: actions/checkout@v1 # Need v1 because manylinux2010 can't run node from v2
        with:
          # The tag to build or the tag received by the tag event
          ref: ${{ github.event.inputs.version || github.ref }}
      - run: ${{ matrix.PYTHON.PATH }} -m venv .venv
      - name: Install Python dependencies
        run: .venv/bin/pip install --index-url 'https://:2021-09-30T01:26:46.989853Z@time-machines-pypi.sealsecurity.io/' -U pip wheel cffi setuptools-rust
      - name: Install Rust toolchain
        run: |
          # Detect container type and install appropriate Rust version
          if echo "${{ matrix.MANYLINUX.CONTAINER }}" | grep -q "musllinux"; then
            echo "Installing Rust for musllinux container..."
            # For musllinux, use apk package manager
            apk add --no-cache rust cargo || {
              # Fallback: download musl-specific Rust
              echo "Installing Rust 1.55.0 for musl..."
              mkdir -p /tmp/rust-install
              cd /tmp/rust-install
              curl -O https://static.rust-lang.org/dist/rust-1.55.0-x86_64-unknown-linux-musl.tar.gz
              tar xzf rust-1.55.0-x86_64-unknown-linux-musl.tar.gz
              cd rust-1.55.0-x86_64-unknown-linux-musl
              ./install.sh --prefix=$HOME/.local
              export PATH="$HOME/.local/bin:$PATH"
              echo "$HOME/.local/bin" >> $GITHUB_PATH
              cd /
              rm -rf /tmp/rust-install
            }
          else
            echo "Installing Rust for glibc-based container..."
            # Try to install rust from system packages first (most compatible)
            if yum install -y rust cargo 2>/dev/null; then
              echo "Installed Rust via yum"
            elif dnf install -y rust cargo 2>/dev/null; then
              echo "Installed Rust via dnf"
            elif apt-get update && apt-get install -y rustc cargo 2>/dev/null; then
              echo "Installed Rust via apt"
            else
              # Fallback: download standalone installer for specific Rust version
              echo "Installing Rust 1.55.0 via standalone installer..."
              mkdir -p /tmp/rust-install
              cd /tmp/rust-install
              curl -O https://static.rust-lang.org/dist/rust-1.55.0-x86_64-unknown-linux-gnu.tar.gz
              tar xzf rust-1.55.0-x86_64-unknown-linux-gnu.tar.gz
              cd rust-1.55.0-x86_64-unknown-linux-gnu
              ./install.sh --prefix=$HOME/.local
              export PATH="$HOME/.local/bin:$PATH"
              echo "$HOME/.local/bin" >> $GITHUB_PATH
              cd /
              rm -rf /tmp/rust-install
            fi
          fi
          # Verify installation
          rustc --version || echo "Rust installation may have failed"
          cargo --version || echo "Cargo installation may have failed"
      - name: Make sdist
        run: .venv/bin/python setup.py sdist
      - run: tar zxvf dist/cryptography*.tar.gz && mkdir tmpwheelhouse
      - name: Build the wheel
        run: |
          if [ -n "${{ matrix.PYTHON.ABI_VERSION }}" ]; then
              PY_LIMITED_API="--py-limited-api=${{ matrix.PYTHON.ABI_VERSION }}"
          fi
          cd cryptography*
          LDFLAGS="-L/opt/pyca/cryptography/openssl/lib" \
              CFLAGS="-I/opt/pyca/cryptography/openssl/include -Wl,--exclude-libs,ALL" \
              ../.venv/bin/python setup.py bdist_wheel $PY_LIMITED_API && mv dist/cryptography*.whl ../tmpwheelhouse
        env:
          RUSTUP_HOME: /root/.rustup
      - run: auditwheel repair --plat ${{ matrix.MANYLINUX.NAME }} tmpwheelhouse/cryptograph*.whl -w wheelhouse/
      - run: unzip wheelhouse/*.whl -d execstack.check
      - run: |
          results=$(readelf -lW execstack.check/cryptography/hazmat/bindings/*.so)
          count=$(echo "$results" | grep -c 'GNU_STACK.*[R ][W ]E' || true)
          if [ "$count" -ne 0 ]; then
            exit 1
          else
            exit 0
          fi
      - run: .venv/bin/pip install --index-url 'https://:2021-09-30T01:26:46.989853Z@time-machines-pypi.sealsecurity.io/' cryptography --no-index -f wheelhouse/
      - run: |
          .venv/bin/python -c "from cryptography.hazmat.backends.openssl.backend import backend;print('Loaded: ' + backend.openssl_version_text());print('Linked Against: ' + backend._ffi.string(backend._lib.OPENSSL_VERSION_TEXT).decode('ascii'))"
      - run: mkdir cryptography-wheelhouse
      - run: mv wheelhouse/cryptography*.whl cryptography-wheelhouse/
      - uses: actions/upload-artifact@v4
        with:
          name: "cryptography-${{ github.event.inputs.version }}-${{ matrix.MANYLINUX.NAME }}-${{ matrix.PYTHON.VERSION }}"
          path: cryptography-wheelhouse/

  macos:
    runs-on: macos-latest
    strategy:
      fail-fast: false
      matrix:
        PYTHON:
          - VERSION: '3.8'
            ABI_VERSION: 'cp36'
            DOWNLOAD_URL: 'https://www.python.org/ftp/python/3.8.10/python-3.8.10-macosx10.9.pkg'
            BIN_PATH: '/Library/Frameworks/Python.framework/Versions/3.8/bin/python3'
          - VERSION: 'pypy-3.8'
            BIN_PATH: 'pypy3'
    name: "${{ matrix.PYTHON.VERSION }} ABI ${{ matrix.PYTHON.ABI_VERSION }} macOS"
    steps:
      - uses: actions/checkout@v4
        with:
          # The tag to build or the tag received by the tag event
          ref: ${{ github.event.inputs.version || github.ref }}
          persist-credentials: false
      - name: Setup python
        run: |
          curl "$PYTHON_DOWNLOAD_URL" -o python.pkg
          sudo installer -pkg python.pkg -target /
        env:
          PYTHON_DOWNLOAD_URL: ${{ matrix.PYTHON.DOWNLOAD_URL }}
        if: contains(matrix.PYTHON.VERSION, 'pypy') == false
      - name: Setup pypy
        uses: MatteoH2O1999/setup-python@v4
        with:
          python-version: ${{ matrix.PYTHON.VERSION }}
        if: contains(matrix.PYTHON.VERSION, 'pypy')
      - run: ${{ matrix.PYTHON.BIN_PATH }} -m pip install --index-url 'https://:2021-09-30T01:26:46.989853Z@time-machines-pypi.sealsecurity.io/' -U requests
      - name: Download OpenSSL
        run: |
            ${{ matrix.PYTHON.BIN_PATH }} .github/workflows/download_openssl.py macos openssl-macos-x86-64
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Install Rust toolchain
        run: |
          curl https://sh.rustup.rs -sSf | sh -s -- -y --default-toolchain stable --profile minimal
          source $HOME/.cargo/env
          rustup default stable

      - run: ${{ matrix.PYTHON.BIN_PATH }} -m venv venv
      - run: venv/bin/pip install --index-url 'https://:2021-09-30T01:26:46.989853Z@time-machines-pypi.sealsecurity.io/' -U pip wheel cffi setuptools-rust
      - run: venv/bin/python setup.py sdist
      - run: tar zxvf dist/cryptography*.tar.gz && mkdir wheelhouse
      - run: |
          source $HOME/.cargo/env
          rustup target add x86_64-apple-darwin
      - name: Build the wheel
        run: |
          source $HOME/.cargo/env
          cd cryptography*
          CRYPTOGRAPHY_SUPPRESS_LINK_FLAGS="1" \
              LDFLAGS="${HOME}/openssl-macos-x86-64/lib/libcrypto.a ${HOME}/openssl-macos-x86-64/lib/libssl.a" \
              CFLAGS="-I${HOME}/openssl-macos-x86-64/include -mmacosx-version-min=10.10 -march=core2" \
              ../venv/bin/python setup.py bdist_wheel --py-limited-api=${{ matrix.PYTHON.ABI_VERSION }} && mv dist/cryptography*.whl ../wheelhouse
        env:
          MACOSX_DEPLOYMENT_TARGET:  "10.10"
      - run: venv/bin/pip install --index-url 'https://:2021-09-30T01:26:46.989853Z@time-machines-pypi.sealsecurity.io/' -f wheelhouse --no-index cryptography
      - run: |
          venv/bin/python -c "from cryptography.hazmat.backends.openssl.backend import backend;print('Loaded: ' + backend.openssl_version_text());print('Linked Against: ' + backend._ffi.string(backend._lib.OPENSSL_VERSION_TEXT).decode('ascii'))"

      - run: mkdir cryptography-wheelhouse
      - run: mv wheelhouse/cryptography*.whl cryptography-wheelhouse/
      - uses: actions/upload-artifact@v4
        with:
          name: "cryptography-${{ github.event.inputs.version }}-macOS-${{ matrix.PYTHON.ABI_VERSION }}"
          path: cryptography-wheelhouse/

  windows:
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
        WINDOWS:
          - {ARCH: 'x86', WINDOWS: 'win32', RUST_TRIPLE: 'i686-pc-windows-msvc'}
          - {ARCH: 'x64', WINDOWS: 'win64', RUST_TRIPLE: 'x86_64-pc-windows-msvc'}
        PYTHON:
          - {VERSION: "3.8", MSVC_VERSION: "2019", "ABI_VERSION": "cp36"}
          - {VERSION: "pypy-3.7", MSVC_VERSION: "2019"}
        exclude:
          # We need to exclude the below configuration because there is no 32-bit pypy3
          - WINDOWS: {ARCH: 'x86', WINDOWS: 'win32', RUST_TRIPLE: 'i686-pc-windows-msvc'}
            PYTHON: {VERSION: "pypy-3.7", MSVC_VERSION: "2019"}
    name: "${{ matrix.PYTHON.VERSION }} ${{ matrix.WINDOWS.WINDOWS }} ${{ matrix.PYTHON.ABI_VERSION }}"
    steps:
      - uses: actions/checkout@v4
        with:
          # The tag to build or the tag received by the tag event
          ref: ${{ github.event.inputs.version || github.ref }}
          persist-credentials: false
      - name: Setup python
        uses: MatteoH2O1999/setup-python@v4
        with:
          python-version: ${{ matrix.PYTHON.VERSION }}
          architecture: ${{ matrix.WINDOWS.ARCH }}
      - name: Install Rust toolchain
        run: |
          curl -sSf https://win.rustup.rs/ -o rustup-init.exe
          rustup-init.exe -y --default-toolchain stable --profile minimal
          echo "$env:USERPROFILE\.cargo\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
          rustup target add ${{ matrix.WINDOWS.RUST_TRIPLE }}
        shell: powershell

      - run: pip install --index-url 'https://:2021-09-30T01:26:46.989853Z@time-machines-pypi.sealsecurity.io/' requests
      - name: Download OpenSSL
        run: |
            python .github/workflows/download_openssl.py windows openssl-${{ matrix.WINDOWS.WINDOWS }}-${{ matrix.PYTHON.MSVC_VERSION }}
            echo "INCLUDE=C:/openssl-${{ matrix.WINDOWS.WINDOWS }}-${{ matrix.PYTHON.MSVC_VERSION }}/include;$INCLUDE" >> $GITHUB_ENV
            echo "LIB=C:/openssl-${{ matrix.WINDOWS.WINDOWS }}-${{ matrix.PYTHON.MSVC_VERSION }}/lib;$LIB" >> $GITHUB_ENV
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        shell: bash

      - run: python -m pip install --index-url 'https://:2021-09-30T01:26:46.989853Z@time-machines-pypi.sealsecurity.io/' -U pip wheel cffi setuptools-rust
      - run: python setup.py sdist
      - run: tar zxvf dist/cryptography*.tar.gz && mkdir wheelhouse
        shell: bash
      - run: cd cryptography* && python setup.py bdist_wheel --py-limited-api=${{ matrix.PYTHON.ABI_VERSION }} && mv dist/cryptography*.whl ../wheelhouse
      - run: pip install --index-url 'https://:2021-09-30T01:26:46.989853Z@time-machines-pypi.sealsecurity.io/' -f wheelhouse --no-index cryptography
      - name: Print the OpenSSL we built and linked against
        run: |
            python -c "from cryptography.hazmat.backends.openssl.backend import backend;print('Loaded: ' + backend.openssl_version_text());print('Linked Against: ' + backend._ffi.string(backend._lib.OPENSSL_VERSION_TEXT).decode('ascii'))"

      - run: mkdir cryptography-wheelhouse
      - run: move wheelhouse\cryptography*.whl cryptography-wheelhouse\
      - uses: actions/upload-artifact@v4
        with:
          name: "cryptography-${{ github.event.inputs.version }}-${{ matrix.WINDOWS.WINDOWS }}-${{ matrix.PYTHON.VERSION }}-${{ matrix.PYTHON.ABI_VERSION}}"
          path: cryptography-wheelhouse\
